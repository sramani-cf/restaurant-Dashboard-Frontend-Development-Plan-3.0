{
  "info": {
    "name": "Restaurant Dashboard API - Updated",
    "description": "Updated API collection for Restaurant Dashboard System with working authentication, CRUD operations, and analytics endpoints. All credentials and examples have been tested and verified.",
    "version": "1.1.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "apiVersion",
      "value": "v1",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "restaurantId",
      "value": "",
      "type": "string"
    },
    {
      "key": "customerId",
      "value": "",
      "type": "string"
    },
    {
      "key": "orderId",
      "value": "",
      "type": "string"
    },
    {
      "key": "reservationId",
      "value": "",
      "type": "string"
    },
    {
      "key": "tableId",
      "value": "",
      "type": "string"
    },
    {
      "key": "pendingVerificationEmail",
      "value": "",
      "type": "string"
    },
    {
      "key": "verificationCode",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üè• Health Checks",
      "item": [
        {
          "name": "General Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "response": []
        },
        {
          "name": "Database Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health/database",
              "host": ["{{baseUrl}}"],
              "path": ["health", "database"]
            }
          },
          "response": []
        },
        {
          "name": "Redis Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health/redis",
              "host": ["{{baseUrl}}"],
              "path": ["health", "redis"]
            }
          },
          "response": []
        },
        {
          "name": "Readiness Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health/ready",
              "host": ["{{baseUrl}}"],
              "path": ["health", "ready"]
            }
          },
          "response": []
        },
        {
          "name": "Liveness Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health/live",
              "host": ["{{baseUrl}}"],
              "path": ["health", "live"]
            }
          },
          "response": []
        },
        {
          "name": "API Root Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîê Authentication",
      "description": "Authentication endpoints with tested credentials. Password requirements: Min 8 chars, uppercase, lowercase, number, and special character.",
      "item": [
        {
          "name": "Register Admin User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    // Email verification flow - tokens not provided on registration",
                  "    if (responseJson.message && responseJson.message.includes('verification')) {",
                  "        console.log('Email verification required. Check your email for verification code.');",
                  "    }",
                  "    // Store user data for verification step",
                  "    if (responseJson.data && responseJson.data.email) {",
                  "        pm.collectionVariables.set('pendingVerificationEmail', responseJson.data.email);",
                  "    }",
                  "    pm.test('User registered successfully', function () {",
                  "        pm.response.to.have.status(201);",
                  "        pm.expect(responseJson.message).to.include('verification');",
                  "    });",
                  "}",
                  "",
                  "if (pm.response.code === 409) {",
                  "    pm.test('User already exists', function () {",
                  "        pm.response.to.have.status(409);",
                  "        console.log('User already registered, try login instead');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@restaurant.com\",\n  \"password\": \"MyVerySecureP@ssw0rd2024!\",\n  \"firstName\": \"Restaurant\",\n  \"lastName\": \"Admin\",\n  \"phone\": \"+1-555-0100\",\n  \"username\": \"admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "Register Test User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    // Email verification flow - tokens not provided on registration",
                  "    if (responseJson.message && responseJson.message.includes('verification')) {",
                  "        console.log('Email verification required. Check your email for verification code.');",
                  "    }",
                  "    // Store user data for verification step",
                  "    if (responseJson.data && responseJson.data.email) {",
                  "        pm.collectionVariables.set('pendingVerificationEmail', responseJson.data.email);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"TestP@ssw0rd123!\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"phone\": \"+1-555-0200\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "Verify Email - Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.tokens) {",
                  "        pm.collectionVariables.set('accessToken', responseJson.tokens.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', responseJson.tokens.refreshToken);",
                  "        console.log('Email verified successfully. Tokens set.');",
                  "        // Clear pending verification email",
                  "        pm.collectionVariables.set('pendingVerificationEmail', '');",
                  "    }",
                  "    pm.test('Email verified successfully', function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(responseJson.message).to.eql('Email verified successfully');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testUserEmail}}\",\n  \"verificationCode\": \"{{verificationCode}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/verify-email",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "verify-email"]
            }
          },
          "response": []
        },
        {
          "name": "Verify Email - Test User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.tokens) {",
                  "        pm.collectionVariables.set('accessToken', responseJson.tokens.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', responseJson.tokens.refreshToken);",
                  "        console.log('Email verified successfully. Tokens set.');",
                  "        // Clear pending verification email",
                  "        pm.collectionVariables.set('pendingVerificationEmail', '');",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"verificationCode\": \"123456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/verify-email",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "verify-email"]
            }
          },
          "response": []
        },
        {
          "name": "Resend Verification Code - Admin",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testUserEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/resend-verification",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "resend-verification"]
            }
          },
          "response": []
        },
        {
          "name": "Resend Verification Code - Test User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/resend-verification",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "resend-verification"]
            }
          },
          "response": []
        },
        {
          "name": "Login Admin",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.tokens) {",
                  "        pm.collectionVariables.set('accessToken', responseJson.tokens.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', responseJson.tokens.refreshToken);",
                  "    }",
                  "    pm.test('Login successful', function () {",
                  "        pm.response.to.have.status(200);",
                  "        pm.expect(responseJson.message).to.eql('Login successful');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@restaurant.com\",\n  \"password\": \"MyVerySecureP@ssw0rd2024!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Login Test User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.tokens) {",
                  "        pm.collectionVariables.set('accessToken', responseJson.tokens.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', responseJson.tokens.refreshToken);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"TestP@ssw0rd123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Get Profile",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "Update Profile",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Restaurant\",\n  \"lastName\": \"Administrator\",\n  \"phone\": \"+1-555-0101\",\n  \"username\": \"restaurant_admin\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "profile"]
            }
          },
          "response": []
        },
        {
          "name": "Change Password",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"MyVerySecureP@ssw0rd2024!\",\n  \"newPassword\": \"NewSuperSecureP@ssw0rd2024!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/change-password",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "change-password"]
            }
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.tokens) {",
                  "        pm.collectionVariables.set('accessToken', responseJson.tokens.accessToken);",
                  "        pm.collectionVariables.set('refreshToken', responseJson.tokens.refreshToken);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "refresh"]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.collectionVariables.set('accessToken', '');",
                  "    pm.collectionVariables.set('refreshToken', '');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "logout"]
            }
          },
          "response": []
        },
        {
          "name": "Logout All Devices",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/logout-all",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "logout-all"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üß™ Test Invalid Authentication",
      "description": "Test scenarios for invalid authentication examples",
      "item": [
        {
          "name": "Register with Weak Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"weak@example.com\",\n  \"password\": \"123456\",\n  \"firstName\": \"Weak\",\n  \"lastName\": \"Password\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "register"]
            }
          },
          "response": []
        },
        {
          "name": "Login with Invalid Credentials",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"wrong@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "auth", "login"]
            }
          },
          "response": []
        },
        {
          "name": "Access Protected Route Without Token",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/restaurants",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "restaurants"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üè™ Restaurants",
      "item": [
        {
          "name": "Get All Restaurants",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/restaurants",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "restaurants"]
            }
          },
          "response": []
        },
        {
          "name": "Create Restaurant",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.data && responseJson.data.id) {",
                  "        pm.collectionVariables.set('restaurantId', responseJson.data.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Aura Restaurant\",\n  \"description\": \"Fine dining experience in downtown\",\n  \"address\": \"1234 Pine Street\",\n  \"city\": \"Seattle\",\n  \"state\": \"WA\",\n  \"zipCode\": \"98101\",\n  \"country\": \"US\",\n  \"phone\": \"+1-206-555-0100\",\n  \"email\": \"info@aura-restaurant.com\",\n  \"website\": \"https://aura-restaurant.com\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"currency\": \"USD\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/restaurants",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "restaurants"]
            }
          },
          "response": []
        },
        {
          "name": "Get Restaurant by ID",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/restaurants/{{restaurantId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "restaurants", "{{restaurantId}}"]
            }
          },
          "response": []
        },
        {
          "name": "Update Restaurant",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Aura Restaurant & Bar\",\n  \"description\": \"Updated fine dining experience with full bar\",\n  \"phone\": \"+1-206-555-0101\",\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/{{apiVersion}}/restaurants/{{restaurantId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "{{apiVersion}}", "restaurants", "{{restaurantId}}"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-refresh token if needed",
          "const currentToken = pm.collectionVariables.get('accessToken');",
          "if (!currentToken || currentToken === '') {",
          "    console.log('‚ö†Ô∏è  No access token available. Please run Login request first.');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Handle common response patterns",
          "if (pm.response.code === 401) {",
          "    console.log('‚ùå Authentication failed. Token may be expired. Try refreshing or logging in again.');",
          "}",
          "",
          "if (pm.response.code === 403) {",
          "    console.log('üö´ Access forbidden. Check user permissions.');",
          "}",
          "",
          "if (pm.response.code === 400) {",
          "    const responseJson = pm.response.json();",
          "    if (responseJson.error === 'Validation failed') {",
          "        console.log('‚ö†Ô∏è  Validation Error:', responseJson.details);",
          "    }",
          "}",
          "",
          "// Log success responses",
          "if (pm.response.code >= 200 && pm.response.code < 300) {",
          "    console.log('‚úÖ Request successful');",
          "}",
          "",
          "// Log error responses for debugging",
          "if (pm.response.code >= 400) {",
          "    console.log('‚ùå Error Response:', pm.response.code, pm.response.status);",
          "    try {",
          "        const errorBody = pm.response.json();",
          "        console.log('Error details:', errorBody.message || errorBody.error);",
          "    } catch (e) {",
          "        console.log('Error body:', pm.response.text());",
          "    }",
          "}"
        ]
      }
    }
  ]
}